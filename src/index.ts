import { chromium, firefox } from 'playwright';
import * as fs from 'fs/promises';
import path from 'path';
import 'dotenv/config';
import {
  clickFirstEditButton,
  goToServidorTab,
  clickAddLocalizacao,
  selectOrgaoJulgador,
  ojAlreadyAssigned
} from './helpers';

const BASE_URL = process.env.PJE_URL!;
const CPF = process.env.SERVIDORA_CPF!;
const PERFIL = process.env.PERFIL || 'Servidor';
const BROWSER_TYPE = process.env.BROWSER_TYPE || 'chrome'; // chrome ou firefox
const LOGIN_WAIT_TIME = parseInt(process.env.LOGIN_WAIT_TIME || '30'); // segundos para aguardar login

const OJS = [
  "Vara do Trabalho de Batatais",
  "Vara do Trabalho de Cajuru",
  "2¬™ Vara do Trabalho de Franca",
  "Vara do Trabalho de Ituverava",
  "Vara do Trabalho de Orl√¢ndia",
  "1¬™ VT de Ribeir√£o Preto",
  "2¬™ VT de Ribeir√£o Preto",
  "3¬™ VT de Ribeir√£o Preto",
  "4¬™ VT de Ribeir√£o Preto",
  "5¬™ VT de Ribeir√£o Preto",
  "6¬™ VT de Ribeir√£o Preto",
  "DAM - Ribeirao Preto",
  "CON1 - Ribeir√£o Preto",
  "CON2 - Ribeir√£o Preto",
  "1¬™ Vara do Trabalho de Sert√£ozinho",
  "2¬™ Vara do Trabalho de Sert√£ozinho",
  "Assessoria de Execu√ß√£o I de Sert√£ozinho, Orl√¢ndia, Batatais e Franca",
  "Assessoria de Execu√ß√£o II de Sert√£ozinho, Orl√¢ndia, Batatais e Franca",
  "EXE1 - Ribeir√£o Preto",
  "EXE2 - Ribeir√£o Preto",
  "EXE3 - Ribeir√£o Preto",
  "EXE4 - Ribeir√£o Preto",
  "LIQ1 - Ribeir√£o Preto",
  "LIQ2 - Ribeir√£o Preto",
  "DIVEX - Ribeir√£o Preto"
];

type ReportRow = {
  oj: string;
  status: 'OK' | 'SKIP' | 'ERRO';
  msg: string;
  screenshot?: string;
};

async function ensureOutputs() {
  await fs.mkdir('data/outputs', { recursive: true });
}

async function main() {
  console.log('üöÄ Iniciando automa√ß√£o PJE Bulk KZ...');
  console.log('URL:', BASE_URL);
  console.log('CPF:', CPF);
  
  await ensureOutputs();
  console.log('üìÅ Diret√≥rio de sa√≠da criado: data/outputs');

  // Conecta ao navegador j√° aberto (CDP)
  const browserEngine = BROWSER_TYPE === 'firefox' ? firefox : chromium;
  const debugPort = BROWSER_TYPE === 'firefox' ? '9223' : '9222';
  
  console.log(`üîó Conectando ao ${BROWSER_TYPE.toUpperCase()} existente...`);
  let browser, context, page;
  
  try {
    if (BROWSER_TYPE === 'firefox') {
       // Firefox usa uma abordagem diferente
       browser = await firefox.launch({ 
         headless: false,
         args: ['--start-debugger-server=9223']
       });
       context = await browser.newContext();
       page = await context.newPage();
       console.log('ü¶ä Firefox iniciado com debugging');
       
       // Pausa para permitir login manual
        console.log(`‚è≥ Aguardando ${LOGIN_WAIT_TIME} segundos para voc√™ fazer login...`);
        console.log('üë§ Por favor, fa√ßa login manualmente no Firefox que acabou de abrir');
        await new Promise(resolve => setTimeout(resolve, LOGIN_WAIT_TIME * 1000));
     } else {
      // Tenta conectar ao Chrome existente na porta 9222
      browser = await chromium.connectOverCDP(`http://localhost:${debugPort}`);
      const contexts = browser.contexts();
      
      if (contexts.length > 0) {
        context = contexts[0];
        const pages = context.pages();
        
        if (pages.length > 0) {
          page = pages[0];
          console.log('‚úÖ Conectado √† aba existente do Chrome');
        } else {
          page = await context.newPage();
          console.log('üìÑ Nova aba criada no contexto existente');
        }
      } else {
        context = await browser.newContext();
        page = await context.newPage();
        console.log('üÜï Novo contexto criado');
      }
    }
  } catch (error) {
     console.log(`‚ö†Ô∏è  N√£o foi poss√≠vel conectar ao ${BROWSER_TYPE} existente, iniciando novo...`);
     browser = await browserEngine.launch({ headless: false });
     context = await browser.newContext();
     page = await context.newPage();
     console.log(`üåê Novo ${BROWSER_TYPE} iniciado`);
     
     // Pausa para permitir login manual quando inicia novo navegador
      console.log(`‚è≥ Aguardando ${LOGIN_WAIT_TIME} segundos para voc√™ fazer login...`);
      console.log(`üë§ Por favor, fa√ßa login manualmente no ${BROWSER_TYPE.toUpperCase()} que acabou de abrir`);
      await new Promise(resolve => setTimeout(resolve, LOGIN_WAIT_TIME * 1000));
      console.log('‚úÖ Continuando com a automa√ß√£o...');
   }

  const report: ReportRow[] = [];

  // 1) Acessa a p√°gina Pessoa F√≠sica
  console.log('üìÑ Verificando p√°gina atual...');
  const pageUrl = page.url();
  
  // Se j√° estamos na p√°gina correta, n√£o precisa navegar
  if (!pageUrl.includes('pessoa-fisica')) {
    console.log('üìÑ Navegando para p√°gina PJE...');
    try {
      await page.goto(BASE_URL, { waitUntil: 'domcontentloaded' });
    } catch (error: any) {
      if (error.message.includes('ERR_ABORTED')) {
        console.log('‚ö†Ô∏è Navega√ß√£o abortada, mas continuando (p√°gina pode j√° estar carregada)...');
      } else {
        throw error;
      }
    }
  } else {
    console.log('‚úÖ J√° estamos na p√°gina correta');
  }

  // Verifica se h√° modal/tela suspensa aberta e fecha
  console.log('üîç Verificando se h√° modal aberta...');
  try {
    // Primeiro, vamos verificar se h√° algum modal/dialog vis√≠vel
    const modalSelectors = [
      '[role="dialog"]',
      '.mat-dialog-container',
      '.cdk-overlay-container [role="dialog"]',
      '.cdk-overlay-pane',
      '.mat-dialog-content',
      '.modal',
      '.popup',
      '.overlay',
      'mat-dialog-container'
    ];
    
    let modalFound = false;
    for (const selector of modalSelectors) {
      const modal = page.locator(selector);
      const count = await modal.count();
      if (count > 0) {
        console.log(`üö™ Modal detectada com seletor: ${selector} (${count} elementos)`);
        modalFound = true;
        
        // Procura por bot√µes de fechar dentro do modal
        const closeButtons = [
          page.locator('button:has-text("Cancelar")'),
          page.locator('button:has-text("Fechar")'),
          page.locator('button:has-text("√ó")'),
          page.locator('button:has-text("Voltar")'),
          page.locator('button[mat-dialog-close]'),
          page.locator('[mat-dialog-close]'),
          page.locator('button[aria-label*="close"]'),
          page.locator('button[aria-label*="fechar"]'),
          page.locator('.mat-dialog-close, .modal-close, .close'),
          modal.locator('button:last-child'),
          modal.locator('button').first() // Primeiro bot√£o do modal
        ];
        
        for (const closeBtn of closeButtons) {
          const btnCount = await closeBtn.count();
          if (btnCount > 0 && await closeBtn.first().isVisible({ timeout: 500 })) {
            console.log(`üö™ Clicando no bot√£o de fechar modal (${btnCount} encontrados)...`);
            await closeBtn.first().click();
            await page.waitForTimeout(2000); // Aguarda modal fechar
            console.log('‚úÖ Modal fechada');
            
            // Aguarda a p√°gina estabilizar ap√≥s fechar o modal
            await page.waitForTimeout(2000);
            break;
          }
        }
        break;
      }
    }
    
    if (!modalFound) {
      console.log('‚ÑπÔ∏è Nenhuma modal detectada pelos seletores padr√£o');
      // Tenta detectar qualquer elemento que possa ser um modal
      const anyModal = page.locator('div').filter({ hasText: /servidor.*localiza√ß√£o|localiza√ß√£o.*visibilidade/i });
      const anyModalCount = await anyModal.count();
      if (anyModalCount > 0) {
        console.log(`üö™ Poss√≠vel modal detectada por texto (${anyModalCount} elementos)`);
        // Tenta pressionar ESC para fechar
        await page.keyboard.press('Escape');
        await page.waitForTimeout(1000);
        console.log('‚úÖ Tentativa de fechar modal com ESC');
      }
    }
  } catch (e: any) {
    console.log('‚ÑπÔ∏è Erro ao verificar/fechar modal:', e?.message);
  }

  // Aguarda login manual se necess√°rio
  const currentUrl = page.url();
  if (currentUrl.includes('sso.cloud.pje.jus.br') || currentUrl.includes('auth')) {
    console.log('üîê P√°gina de login detectada!');
    console.log('üë§ Por favor, fa√ßa login manualmente no navegador...');
    console.log('‚è≥ Aguardando redirecionamento ap√≥s login...');
    
    // Aguarda at√© ser redirecionado de volta para a p√°gina principal
    await page.waitForURL(url => !url.toString().includes('sso.cloud.pje.jus.br') && !url.toString().includes('auth'), {
      timeout: 300000 // 5 minutos para fazer login
    });
    
    console.log('‚úÖ Login realizado com sucesso!');
    console.log('üîÑ Redirecionando para p√°gina de pessoa f√≠sica...');
    await page.goto(BASE_URL, { waitUntil: 'domcontentloaded' });
  }

  // Aguarda a p√°gina carregar completamente
  console.log('‚è≥ Aguardando p√°gina carregar...');
  await page.waitForTimeout(5000); // Aumentado para 5 segundos
  
  // Aguarda especificamente pelo campo de CPF aparecer
  console.log('üîç Aguardando campo de CPF aparecer...');
  try {
    await page.waitForSelector('input[placeholder*="CPF" i], input[name*="cpf" i], input[id*="cpf" i]', { timeout: 10000 });
  } catch (e) {
    console.log('‚ö†Ô∏è Campo de CPF n√£o detectado pelo waitForSelector, continuando...');
  }
  
  // Tira screenshot para debug
  await page.screenshot({ path: 'data/outputs/debug_before_cpf.png', fullPage: true });
  
  // 2) Item 2 - Digitar CPF
  console.log('Preenchendo CPF:', CPF);
  
  // Estrat√©gia melhorada: primeiro tenta os seletores mais espec√≠ficos
  const cpfFieldCandidates = [
    page.locator('input[placeholder*="CPF" i]').first(),
    page.locator('input[name*="cpf" i]').first(),
    page.locator('input[id*="cpf" i]').first(),
    page.getByLabel(/cpf/i),
    page.getByPlaceholder(/cpf/i),
    page.getByRole('textbox', { name: /cpf/i }),
    page.locator('section:has-text("2") input[type="text"]').first(),
    page.locator('input[type="text"]:visible').first()
  ];
  
  let filled = false;
  for (let i = 0; i < cpfFieldCandidates.length; i++) {
    const candidate = cpfFieldCandidates[i];
    try {
      console.log(`Tentando candidato ${i + 1} para CPF...`);
      await candidate.waitFor({ state: 'visible', timeout: 3000 });
      await candidate.fill(CPF, { timeout: 3000 });
      filled = true;
      console.log(`‚úÖ CPF preenchido com sucesso (candidato ${i + 1})`);
      break;
    } catch (e: any) {
       console.log(`Candidato ${i + 1} falhou:`, e?.message || e);
    }
  }
  
  if (!filled) {
    // Debug: listar todos os inputs dispon√≠veis
    console.log('üîç Debug: Listando todos os inputs dispon√≠veis...');
    const allInputs = await page.locator('input').all();
    for (let i = 0; i < Math.min(allInputs.length, 15); i++) {
      const input = allInputs[i];
      const type = await input.getAttribute('type');
      const placeholder = await input.getAttribute('placeholder');
      const name = await input.getAttribute('name');
      const id = await input.getAttribute('id');
      const visible = await input.isVisible();
      const value = await input.inputValue();
      console.log(`Input ${i + 1}: type="${type}" placeholder="${placeholder}" name="${name}" id="${id}" visible=${visible} value="${value}"`);
    }
    throw new Error('N√£o encontrei o campo de CPF no Item 2.');
  }

  // Procura e clica no bot√£o de busca/procurar se existir
  console.log('üîç Procurando bot√£o de busca...');
  const searchButtons = [
    page.getByRole('button', { name: /procurar|buscar|pesquisar/i }),
    page.locator('button:has-text("Procurar")'),
    page.locator('button:has-text("Buscar")'),
    page.locator('button[type="submit"]'),
    page.locator('input[type="submit"]')
  ];
  
  for (const searchBtn of searchButtons) {
    if (await searchBtn.count() > 0 && await searchBtn.first().isVisible({ timeout: 1000 })) {
      console.log('üîç Clicando no bot√£o de busca...');
      await searchBtn.first().click();
      break;
    }
  }

  // Aguarda resultados aparecerem
  console.log('‚è≥ Aguardando resultados da busca...');
  await page.waitForTimeout(3000);
  
  // Verifica se h√° resultados
  const resultSelectors = [
    'table tbody tr',
    '.result-row',
    '[role="row"]',
    '.pessoa-result',
    '.search-result'
  ];
  
  let hasResults = false;
  for (const selector of resultSelectors) {
    const results = page.locator(selector);
    const count = await results.count();
    if (count > 0) {
      console.log(`‚úÖ Encontrados ${count} resultados com seletor: ${selector}`);
      hasResults = true;
      break;
    }
  }
  
  if (!hasResults) {
    console.log('‚ö†Ô∏è Nenhum resultado encontrado para o CPF:', CPF);
    // Tira screenshot para debug
    await page.screenshot({ path: 'data/outputs/no_results_debug.png', fullPage: true });
    throw new Error(`Nenhum resultado encontrado para o CPF: ${CPF}`);
  }

  // Aguarda aparecer resultado com nome + √≠cone de l√°pis e clica em Editar
  await clickFirstEditButton(page);

  // 3) Aba "Servidor"
  await goToServidorTab(page);

  // 4) Para cada OJ da lista
  console.log(`Processando ${OJS.length} √ìrg√£os Julgadores...`);
  for (let i = 0; i < OJS.length; i++) {
    const oj = OJS[i];
    console.log(`\n[${i + 1}/${OJS.length}] Processando: ${oj}`);
    
    try {
      // Se j√° existir, SKIP
      if (await ojAlreadyAssigned(page, oj)) {
        console.log(`‚úì OJ j√° atribu√≠do: ${oj}`);
        report.push({ oj, status: 'SKIP', msg: 'OJ j√° atribu√≠do' });
        continue;
      }

      // Adicionar Localiza√ß√£o/Visibilidade
      console.log('Clicando em Adicionar Localiza√ß√£o...');
      await clickAddLocalizacao(page);

      // Selecionar √ìrg√£o Julgador e salvar
      console.log('Selecionando √ìrg√£o Julgador...');
      await selectOrgaoJulgador(page, oj, PERFIL);

      // Confirma que apareceu na grade
      console.log('Verificando se OJ foi inclu√≠do...');
      const exists = await ojAlreadyAssigned(page, oj);
      if (!exists) throw new Error('Ap√≥s salvar, o OJ n√£o apareceu na grade/lista.');

      // Evid√™ncia
      const shotPath = path.join('data/outputs', `ok_${oj}.png`).replace(/\s+/g, '_');
      await page.screenshot({ path: shotPath, fullPage: true });
      console.log(`‚úì Sucesso: ${oj}`);

      report.push({ oj, status: 'OK', msg: 'Localiza√ß√£o/Visibilidade inclu√≠da', screenshot: shotPath });
    } catch (e: any) {
      console.log(`‚úó Erro ao processar ${oj}:`, e?.message);
      const shotPath = path.join('data/outputs', `err_${oj}.png`).replace(/\s+/g, '_');
      await page.screenshot({ path: shotPath, fullPage: true });
      report.push({ oj, status: 'ERRO', msg: e?.message ?? 'Falha ao incluir OJ', screenshot: shotPath });
    }
  }

  // 5) Gera relat√≥rio CSV
  console.log('\nüìä Gerando relat√≥rio...');
  const csv = [
    'oj,status,msg,screenshot',
    ...report.map(r => [r.oj, r.status, JSON.stringify(r.msg), r.screenshot ?? ''].join(','))
  ].join('\n');
  await fs.writeFile('data/outputs/relatorio.csv', csv, 'utf8');
  
  // Estat√≠sticas finais
  const stats = {
    total: report.length,
    ok: report.filter(r => r.status === 'OK').length,
    skip: report.filter(r => r.status === 'SKIP').length,
    erro: report.filter(r => r.status === 'ERRO').length
  };
  
  console.log('\nüìà Estat√≠sticas finais:');
  console.log(`Total: ${stats.total}`);
  console.log(`‚úÖ Sucesso: ${stats.ok}`);
  console.log(`‚è≠Ô∏è  Pulados: ${stats.skip}`);
  console.log(`‚ùå Erros: ${stats.erro}`);

  await browser.close();
  console.log('\n‚ú® Finalizado! Relat√≥rio salvo em: data/outputs/relatorio.csv');
}

main().catch(err => {
  console.error(err);
  process.exit(1);
});
